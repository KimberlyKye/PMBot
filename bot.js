const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');
const pidusage = require('pidusage'); // –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

dotenv.config();

//#region –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —É—Ç–µ—á–µ–∫
const userSessions = new Map();

// –ú–∞—Å—Å–∏–≤—ã —Ñ—Ä–∞–∑
const phrases = {
  reminders: [
    '–ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞?',
    '–¢—ã –≤—Å—ë –µ—â—ë –≤ –¥–µ–ª–µ?',
    '–ù–µ –æ—Ç–≤–ª–µ–∫–∞–µ—à—å—Å—è? –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è!',
    '–ü—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å?',
    '–í—Ä–µ–º—è –∏–¥—ë—Ç, –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è!',
    '–§–æ–∫—É—Å! –°–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–ª?',
    '–ü–æ–º–Ω–∏ –ø—Ä–æ —Ç–∞–π–º–µ—Ä! –ö–∞–∫ —É—Å–ø–µ—Ö–∏?',
    '–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –≤—Ä–µ–º—è –∏–¥—ë—Ç!',
    '–†–∞–±–æ—Ç–∞ –∫–∏–ø–∏—Ç?',
    '–°–∫–æ–ª—å–∫–æ —É–∂–µ —Å–¥–µ–ª–∞–ª –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è?',
    '–ù—É –∫–∞–∫ —Ç–∞–º –¥–µ–ª–∞?',
    '–ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å?',
    '–í —Å—Ä–æ–∫–∏ —É–ª–æ–∂–∏–º—Å—è?',
  ],
  breaks: [
    'üéâ –í—Å—ë, –¥–∞–≤–∞–π –∑–∞ –∫–æ—Ñ–µ, –ø–æ–∫—É—Ä–∏—Ç—å –∏ –∑–∞ —Ä–∞–±–æ—Ç—É! –ù–∞ –≤—Å—ë –ø—Ä–æ –≤—Å—ë –ø–∞—Ä–∞ –º–∏–Ω—É—Ç!',
    '–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª! –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞ –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.',
    '–ü–µ—Ä–µ—Ä—ã–≤! –ü–∞—Ä–∞ –º–∏–Ω—É—Ç –∏ —Å–Ω–æ–≤–∞ –≤ –±–æ–π.',
    '–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –Ω–∞ –ø–µ—Ä–µ–∫—É—Ä.',
    '–û—Ç–¥—ã—Ö - –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã! –ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ä–µ–ª–∞–∫—Å–∞.',
    '–í—Ä–µ–º—è –Ω–∞ –¥—É—à –∏ —á–∞–π! –ü–∞—Ä–∞ –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.',
    '–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ–º–Ω–æ–∂–∫–æ –º–∏–Ω—É—Ç –Ω–∞ —á–∞–π –∏ –∫–æ—Ñ–µ. –ò –∑–∞ —Ä–∞–±–æ—Ç—É!',
    '–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–µ–º–Ω–æ–≥–æ –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.',
  ],
  longBreaks: [
    '–¢—ã –º–æ–ª–æ–¥–µ—Ü! 4 –ø–æ–º–∏–¥–æ—Ä–∞ –ø–æ–∑–∞–¥–∏ - –æ—Ç–¥—ã—Ö–∞–π –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤!',
    '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞—Ä–∞–±–æ—Ç–∞–ª –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –ø–æ–∫—É—à–∞—Ç—å –∏ –ø–æ–≥—É–ª—è—Ç—å.',
    '4 —Ü–∏–∫–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –†–∞—Å—Å–ª–∞–±—å—Å—è, –≤–ø–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö.',
    '–ó–∞—Å–ª—É–∂–∏–ª –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤! –û—Ç–¥–æ—Ö–Ω–∏ —Ö–æ—Ä–æ—à–µ–Ω–µ—á–∫–æ –∏ —Å–Ω–æ–≤–∞ –≤ –±–æ–π.',
    '–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞, –µ—Å–ª–∏ –Ω–∞ –æ–±–µ–¥.',
  ],
  workStarts: [
    '‚è∞ –ù—É —á—Ç–æ, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å, –¥–µ–¥–ª–∞–π–Ω—ã –¥–∞–≤–Ω–æ —É–∂–µ —Å–≥–æ—Ä–µ–ª–∏! –î–∞–≤–∞–π –∑–∞ —Ä–∞–±–æ—Ç—É!',
    '–ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!',
    '–û—Ç–¥–æ—Ö–Ω—É–ª–∏? –¢–µ–ø–µ—Ä—å –∑–∞ –¥–µ–ª–æ!',
    '–ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!',
    '–í—Ä–µ–º—è –∑–∞ —Ä–∞–±–æ—Ç—É!',
    '–î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å!',
    '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å!',
    '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ!',
    '–ù—É —á—Ç–æ, –ø–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!',
    '–¢–∞—Å–∫–∏ —Å–∞–º–∏ —Å–µ–±—è –Ω–µ —Å–¥–µ–ª–∞—é—Ç',
  ],
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const keyboards = {
  settings: {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞',
            callback_data: 'set_reminder_freq',
          },
        ],
        [
          {
            text: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã üïí',
            callback_data: 'set_work_duration',
          },
        ],
        [
          {
            text: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚òï',
            callback_data: 'set_break_duration',
          },
        ],
        [
          {
            text: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ üèñÔ∏è',
            callback_data: 'set_long_break',
          },
        ],
      ],
    },
  },
  start: {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –ó–∞ —Ä–∞–±–æ—Ç—É!', callback_data: 'start_pomodoro' }],
        [
          {
            text: '‚öôÔ∏è –ü–µ—Ä–µ—Å–º–æ—Ç—Ä —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞',
            callback_data: 'open_settings',
          },
        ],
      ],
    },
  },
};

//#endregion

//#region –£—Ç–∏–ª–∏—Ç—ã
// –£—Ç–∏–ª–∏—Ç—ã
function getRandomPhrase(type) {
  const phraseList = phrases[type] || [];
  return phraseList[Math.floor(Math.random() * phraseList.length)] || '';
}

function formatTime(minutes) {
  return minutes > 0 ? `${minutes} –º–∏–Ω` : '–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å';
}

function getDefaultSettings() {
  return {
    reminderFrequency: 3,
    workDuration: 25,
    breakDuration: 5,
    longBreakDuration: 15,
    pomodoroCount: 0,
    activeTimers: {},
  };
}

function getReminderRow(reminderFrequency) {
  if (reminderFrequency > 0) {
    return `- –ê —è —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–∏ –º–æ–º–µ–Ω—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é –∫–∞–∂–¥—ã–µ ${formatTime(
      reminderFrequency
    )} üôã‚Äç‚ôÄÔ∏è`;
  } else {
    return `–ê —è –Ω–µ –æ—Ç—Å–≤–µ—á–∏–≤–∞—é, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç –ø–æ—Ä–∞ –ø–∏—Ç—å —á–∞–π ‚òï`;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞–º–∏
function clearUserTimers(user) {
  if (user.activeTimers) {
    Object.values(user.activeTimers).forEach((timer) => {
      if (timer) clearTimeout(timer);
    });
    user.activeTimers = {};
  }
}

//#endregion

//#region –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  console.error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª');
  process.exit(1);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
const botConfig = {
  polling: {
    interval: 300,
    timeout: 10,
    autoStart: false, // –í–∞–∂–Ω–æ: –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç
  },
  request: {
    timeout: 15000,
  },
};

const bot = new TelegramBot(token, botConfig);

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
let isPollingActive = false;
let restartAttempts = 0;
const MAX_RESTART_ATTEMPTS = 5;

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('polling_error', async (error) => {
  console.error(`Polling error (${error.code}):`, error.message);

  if (error.code === 409) {
    // –ö–æ–Ω—Ñ–ª–∏–∫—Ç polling
    console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç polling...');
    await killDuplicateProcesses();
  }

  if (restartAttempts < MAX_RESTART_ATTEMPTS) {
    restartAttempts++;
    const delay = Math.min(5000 * restartAttempts, 30000);
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫...`);

    setTimeout(async () => {
      await safeStartPolling();
    }, delay);
  } else {
    console.error('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
  }
});

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ polling
async function safeStartPolling() {
  if (isPollingActive) {
    console.log('Polling —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫');
    return;
  }

  try {
    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º polling...');
    await bot.stopPolling(); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    isPollingActive = true;
    await bot.startPolling();
    restartAttempts = 0;
    console.log('Polling —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
  } catch (error) {
    isPollingActive = false;
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling:', error.message);
  }
}

// –ü–æ–∏—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
async function killDuplicateProcesses() {
  try {
    const stats = await pidusage(process.pid);
    const command = `ps aux | grep "node" | grep "bot.js" | grep -v "grep" | grep -v "${stats.pid}" | awk '{print $2}'`;

    const { exec } = require('child_process');
    exec(command, (err, stdout) => {
      if (err) return;

      const pids = stdout.trim().split('\n').filter(Boolean);
      if (pids.length > 0) {
        console.log(`–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã: ${pids.join(', ')}`);
        pids.forEach((pid) => {
          process.kill(pid, 'SIGTERM');
          console.log(`–ü—Ä–æ—Ü–µ—Å—Å ${pid} –∑–∞–≤–µ—Ä—à–µ–Ω`);
        });
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
  }
}

// Graceful shutdown
async function shutdown() {
  console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  isPollingActive = false;

  try {
    await bot.stopPolling();
    console.log('Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
    process.exit(1);
  }
}

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
async function initialize() {
  try {
    await killDuplicateProcesses();
    await safeStartPolling();

    // –ó–¥–µ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    initHandlers();

    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
initialize().catch((error) => {
  console.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

//#endregion

//#region –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
function initHandlers() {
  // –°—é–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–µ –≤—Å–µ –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥:
  // bot.onText, bot.on('callback_query') –∏ —Ç.–¥.

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
  bot
    .setMyCommands([
      { command: 'start', description: '–ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä' },
      { command: 'hello', description: '–í–∑—è—Ç—å —Ç–∞—Å–∫—É –≤ —Ä–∞–±–æ—Ç—É' },
      { command: 'stop', description: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–∞—Å–∫–æ–π' },
      { command: 'settings', description: '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞' },
    ])
    .catch((error) => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', error));

  async function showWelcomeMessage(chatId) {
    let user = userSessions.get(chatId);
    if (!user) {
      user = getDefaultSettings();
      userSessions.set(chatId, user);
    }
    try {
      const welcomeMessage =
        `üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–ª–ª–∏ - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞!*\n\n` +
        `–°–µ–π—á–∞—Å —É –Ω–∞—Å —Å —Ç–æ–±–æ–π —Ç–∞–∫–∏–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:\n` +
        `- –°–ø–µ—Ä–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—à—å ${user.workDuration} –º–∏–Ω üë©‚Äçüíª\n` +
        `- –ü–æ—Ç–æ–º —É—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: ${user.breakDuration} –º–∏–Ω ‚òï\n` +
        `- –ü–æ—Å–ª–µ 4-—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ - –∏–¥—ë—à—å –Ω–∞ –æ–±–µ–¥ –Ω–∞ ${user.longBreakDuration} –º–∏–Ω  üèñÔ∏è\n` +
        `${getReminderRow(user.reminderFrequency)}\n\n` +
        `–ù–∞–∂–º–∏ /hello —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ /settings –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫`;

      await bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'Markdown',
        ...keyboards.start,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Pomodoro
  async function startPomodoroSession(chatId) {
    let user = userSessions.get(chatId);
    if (!user) {
      user = getDefaultSettings();
      userSessions.set(chatId, user);
    }

    clearUserTimers(user);

    user.pomodoroCount++;
    const isLongBreak = user.pomodoroCount % 4 === 0;
    const breakDuration = isLongBreak
      ? user.longBreakDuration
      : user.breakDuration;

    try {
      await bot.sendMessage(
        chatId,
        `üçÖ –ü–æ–µ—Ö–∞–ª–∏! –†–∞–±–æ—Ç–∞–µ–º ${user.workDuration} –º–∏–Ω—É—Ç!` +
          (isLongBreak ? '\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤!' : '')
      );

      // –¢–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      if (user.reminderFrequency > 0) {
        user.activeTimers.checkTimer = setInterval(() => {
          bot
            .sendMessage(chatId, getRandomPhrase('reminders'))
            .catch((error) =>
              console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error)
            );
        }, user.reminderFrequency * 60 * 1000);
      }

      // –¢–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      user.activeTimers.workTimer = setTimeout(async () => {
        clearInterval(user.activeTimers.checkTimer);

        const breakMessage = isLongBreak
          ? getRandomPhrase('longBreaks')
          : getRandomPhrase('breaks');

        await bot.sendMessage(chatId, breakMessage);

        // –¢–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
        user.activeTimers.restTimer = setTimeout(() => {
          bot
            .sendMessage(chatId, getRandomPhrase('workStarts'))
            .then(() => startPomodoroSession(chatId))
            .catch((error) => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:', error));
        }, breakDuration * 60 * 1000);
      }, user.workDuration * 60 * 1000);

      userSessions.set(chatId, user);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞:', error);
      bot.sendMessage(chatId, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
  }

  // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    await showWelcomeMessage(chatId);
  });

  bot.onText(/\/hello/, (msg) => {
    startPomodoroSession(msg.chat.id);
  });

  bot.onText(/\/stop/, async (msg) => {
    const chatId = msg.chat.id;
    const user = userSessions.get(chatId);

    if (user) {
      clearUserTimers(user);
      await bot.sendMessage(
        chatId,
        '–û–≥–æ, —è –≥–ª—è–∂—É, —É–∂–µ –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –û—Ç–ª–∏—á–Ω–æ, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏—à—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–∞—Å–∫–µ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ /hello'
      );
    } else {
      await bot.sendMessage(
        chatId,
        '–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –ù–∞–∂–º–∏ /hello —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.'
      );
    }
  });

  bot.onText(/\/settings/, (msg) => {
    bot.sendMessage(
      msg.chat.id,
      '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞:',
      keyboards.settings
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    let user = userSessions.get(chatId) || getDefaultSettings();

    try {
      switch (query.data) {
        case 'start_pomodoro':
          await bot.answerCallbackQuery(query.id);
          return startPomodoroSession(chatId);

        case 'open_settings':
          await bot.answerCallbackQuery(query.id);
          return bot.sendMessage(
            chatId,
            '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–∞:',
            keyboards.settings
          );

        case 'set_reminder_freq':
          bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å', callback_data: 'reminder_0' }],
                [{ text: '–ö–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã', callback_data: 'reminder_3' }],
                [{ text: '–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç', callback_data: 'reminder_5' }],
                [
                  {
                    text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...',
                    callback_data: 'custom_reminder',
                  },
                ],
              ],
            },
          });
          break;

        case 'set_work_duration':
          bot.sendMessage(chatId, '–£—Å—Ç–∞–Ω–æ–≤–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã (–º–∏–Ω):', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '25 –º–∏–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)', callback_data: 'work_25' }],
                [{ text: '30 –º–∏–Ω', callback_data: 'work_30' }],
                [{ text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...', callback_data: 'custom_work' }],
              ],
            },
          });
          break;

        case 'set_break_duration':
          bot.sendMessage(
            chatId,
            '–£—Å—Ç–∞–Ω–æ–≤–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–∏–Ω):',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '5 –º–∏–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)', callback_data: 'break_5' }],
                  [{ text: '10 –º–∏–Ω', callback_data: 'break_10' }],
                  [{ text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...', callback_data: 'custom_break' }],
                ],
              },
            }
          );
          break;

        case 'set_long_break':
          bot.sendMessage(
            chatId,
            '–£—Å—Ç–∞–Ω–æ–≤–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–∏–Ω):',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '15 –º–∏–Ω', callback_data: 'long_15' }],
                  [{ text: '30 –º–∏–Ω', callback_data: 'long_30' }],
                  [{ text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...', callback_data: 'custom_long' }],
                ],
              },
            }
          );
          break;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        case 'reminder_0':
        case 'reminder_3':
        case 'reminder_5':
          const freq = parseInt(query.data.split('_')[1]);
          user.reminderFrequency = freq;
          userSessions.set(chatId, user);
          await bot.answerCallbackQuery(query.id, {
            text: `–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${formatTime(freq)}`,
          });
          return showCurrentSettings(chatId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
        case 'work_25':
        case 'work_30':
          const work = parseInt(query.data.split('_')[1]);
          user.workDuration = work;
          userSessions.set(chatId, user);
          await bot.answerCallbackQuery(query.id, {
            text: `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${work} –º–∏–Ω`,
          });
          return showCurrentSettings(chatId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
        case 'break_5':
        case 'break_10':
          const brk = parseInt(query.data.split('_')[1]);
          user.breakDuration = brk;
          userSessions.set(chatId, user);
          await bot.answerCallbackQuery(query.id, {
            text: `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${brk} –º–∏–Ω`,
          });
          return showCurrentSettings(chatId);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
        case 'long_15':
        case 'long_30':
          const long = parseInt(query.data.split('_')[1]);
          user.longBreakDuration = long;
          userSessions.set(chatId, user);
          await bot.answerCallbackQuery(query.id, {
            text: `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${long} –º–∏–Ω`,
          });
          return showCurrentSettings(chatId);

        // –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        case 'custom_reminder':
          bot.sendMessage(
            chatId,
            '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 25):'
          );
          user.waitingFor = 'reminder';
          break;

        case 'custom_work':
          bot.sendMessage(
            chatId,
            '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 60):'
          );
          user.waitingFor = 'work';
          break;

        case 'custom_break':
          bot.sendMessage(
            chatId,
            '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 30):'
          );
          user.waitingFor = 'break';
          break;

        case 'custom_long':
          bot.sendMessage(
            chatId,
            '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 60):'
          );
          user.waitingFor = 'long';
          break;

        case 'back_to_menu':
          return showMainMenu(chatId);
      }

      await bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    }
  });

  // –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
  async function showCurrentSettings(chatId) {
    const user = userSessions.get(chatId) || getDefaultSettings();

    const settingsMessage =
      `‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n` +
      `üçÖ –†–∞–±–æ—Ç–∞: ${user.workDuration} –º–∏–Ω\n` +
      `‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: ${user.breakDuration} –º–∏–Ω\n` +
      `üèñÔ∏è –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: ${user.longBreakDuration} –º–∏–Ω\n` +
      `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${formatTime(user.reminderFrequency)}`;

    await bot.sendMessage(chatId, settingsMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'open_settings' }],
          [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      },
    });
  }

  // –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  async function showMainMenu(chatId) {
    await showWelcomeMessage(chatId);
  }
}
//#endregion
