const TelegramBot = require('node-telegram-bot-api');
const dotenv = require('dotenv');

dotenv.config();

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, {
  polling: true,
  request: {
    timeout: 10000,
    agent: null,
  },
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
  console.error('Polling error:', error.message);
});

bot
  .setChatMenuButton({
    menu_button: {
      type: 'commands',
      text: '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',
    },
  })
  .then()
  .catch((error) => console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', error));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSettings = {};

// –ú–∞—Å—Å–∏–≤—ã —Ñ—Ä–∞–∑
const reminderPhrases = [
  '–ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞?',
  '–¢—ã –≤—Å—ë –µ—â—ë –≤ –¥–µ–ª–µ?',
  '–ù–µ –æ—Ç–≤–ª–µ–∫–∞–µ—à—å—Å—è? –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è!',
  '–ü—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å?',
  '25 –º–∏–Ω—É—Ç –∏–¥—ë—Ç, –Ω–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–π—Å—è!',
  '–§–æ–∫—É—Å! –°–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–ª?',
  '–ü–æ–º–Ω–∏ –ø—Ä–æ —Ç–∞–π–º–µ—Ä! –ö–∞–∫ —É—Å–ø–µ—Ö–∏?',
  '–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –≤—Ä–µ–º—è –∏–¥—ë—Ç!',
  '–†–∞–±–æ—Ç–∞ –∫–∏–ø–∏—Ç?',
  '–°–∫–æ–ª—å–∫–æ —É–∂–µ —Å–¥–µ–ª–∞–ª –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è?',
  '–ù—É –∫–∞–∫ —Ç–∞–º –¥–µ–ª–∞?',
  '–ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å?',
  '–í —Å—Ä–æ–∫–∏ —É–ª–æ–∂–∏–º—Å—è?',
];

const breakPhrases = [
  'üéâ –í—Å—ë, –¥–∞–≤–∞–π –∑–∞ –∫–æ—Ñ–µ, –ø–æ–∫—É—Ä–∏—Ç—å –∏ –∑–∞ —Ä–∞–±–æ—Ç—É! –ù–∞ –≤—Å—ë –ø—Ä–æ –≤—Å—ë –ø–∞—Ä–∞ –º–∏–Ω—É—Ç!',
  '–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª! –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞ –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.',
  '–ü–µ—Ä–µ—Ä—ã–≤! –ü–∞—Ä–∞ –º–∏–Ω—É—Ç –∏ —Å–Ω–æ–≤–∞ –≤ –±–æ–π.',
  '–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –Ω–∞ –ø–µ—Ä–µ–∫—É—Ä.',
  '–û—Ç–¥—ã—Ö - –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã! –ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ä–µ–ª–∞–∫—Å–∞.',
  '–í—Ä–µ–º—è –Ω–∞ –¥—É—à –∏ —á–∞–π! –ü–∞—Ä–∞ –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.',
  '–í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ–º–Ω–æ–∂–∫–æ –º–∏–Ω—É—Ç –Ω–∞ —á–∞–π –∏ –∫–æ—Ñ–µ. –ò –∑–∞ —Ä–∞–±–æ—Ç—É!',
  '–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ù–µ–º–Ω–æ–≥–æ –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.',
];

const longBreakPhrases = [
  '–¢—ã –º–æ–ª–æ–¥–µ—Ü! 4 –ø–æ–º–∏–¥–æ—Ä–∞ –ø–æ–∑–∞–¥–∏ - –æ—Ç–¥—ã—Ö–∞–π –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤!',
  '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞—Ä–∞–±–æ—Ç–∞–ª –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –ø–æ–∫—É—à–∞—Ç—å –∏ –ø–æ–≥—É–ª—è—Ç—å.',
  '4 —Ü–∏–∫–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –†–∞—Å—Å–ª–∞–±—å—Å—è, –≤–ø–µ—Ä–µ–¥–∏ –±–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö.',
  '–ó–∞—Å–ª—É–∂–∏–ª –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤! –û—Ç–¥–æ—Ö–Ω–∏ —Ö–æ—Ä–æ—à–µ–Ω–µ—á–∫–æ –∏ —Å–Ω–æ–≤–∞ –≤ –±–æ–π.',
  '–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞, –µ—Å–ª–∏ –Ω–∞ –æ–±–µ–¥.',
];

const workStartPhrases = [
  '‚è∞ –ù—É —á—Ç–æ, —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å, –¥–µ–¥–ª–∞–π–Ω—ã –¥–∞–≤–Ω–æ —É–∂–µ —Å–≥–æ—Ä–µ–ª–∏! –î–∞–≤–∞–π –∑–∞ —Ä–∞–±–æ—Ç—É!',
  '–ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å!',
  '–û—Ç–¥–æ—Ö–Ω—É–ª–∏? –¢–µ–ø–µ—Ä—å –∑–∞ –¥–µ–ª–æ!',
  '–ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ!',
  '–í—Ä–µ–º—è –∑–∞ —Ä–∞–±–æ—Ç—É!',
  '–î–∞–≤–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å!',
  '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å!',
  '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ!',
  '–ù—É —á—Ç–æ, –ø–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!',
  '–¢–∞—Å–∫–∏ —Å–∞–º–∏ —Å–µ–±—è –Ω–µ —Å–¥–µ–ª–∞—é—Ç',
];

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
const settingsKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: '–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚è∞', callback_data: 'set_reminder_freq' }],
      [{ text: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã üïí', callback_data: 'set_work_duration' }],
      [
        {
          text: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚òï',
          callback_data: 'set_break_duration',
        },
      ],
      [
        {
          text: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ üèñÔ∏è',
          callback_data: 'set_long_break',
        },
      ],
    ],
  },
};

const startKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: 'üöÄ –ó–∞ —Ä–∞–±–æ—Ç—É!', callback_data: 'start_pomodoro' }],
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'open_settings' }],
    ],
  },
};

// –§—É–Ω–∫—Ü–∏–∏-—É—Ç–∏–ª–∏—Ç—ã
function getRandomPhrase(phrases) {
  return phrases[Math.floor(Math.random() * phrases.length)];
}

function formatTime(minutes) {
  return minutes > 0 ? `${minutes} –º–∏–Ω` : '–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å';
}

function getReminderRow() {
  return formatTime(userSettings[chatId].reminderFrequency)
    ? `- –ê —è —Ç–µ–±–µ –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–∏ –º–æ–º–µ–Ω—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é –∫–∞–∂–¥—ã–µ ${formatTime(
        userSettings[chatId].reminderFrequency
      )} –º–∏–Ω üôã‚Äç‚ôÄÔ∏è`
    : `–ê —è –Ω–µ –æ—Ç—Å–≤–µ—á–∏–≤–∞—é, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç –ø–æ—Ä–∞ –ø–∏—Ç—å —á–∞–π ‚òï`;
}

function getWelcomeMessage() {
  return (
    `üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–ª–ª–∏ - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞!*\n\n` +
    `–°–µ–π—á–∞—Å —É –Ω–∞—Å —Å —Ç–æ–±–æ–π —Ç–∞–∫–∏–µ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–±–æ—Ç—ã:\n` +
    `- –†–∞–±–æ—Ç–∞–µ—à—å ${userSettings[chatId].workDuration} –º–∏–Ω—É—Ç üë©‚Äçüíª\n` +
    `- –ü–æ—Ç–æ–º –¥–µ–ª–∞–µ—à—å –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ ${userSettings[chatId].breakDuration} –º–∏–Ω—É—Ç ‚òï\n` +
    `- –ö–æ–≥–¥–∞ —Å–¥–µ–ª–∞–Ω—ã 4 –∑–∞–¥–∞—á–∏, –¥–µ–ª–∞–µ—à—å –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –æ–±–µ–¥ - ${userSettings[chatId].longBreakDuration} –º–∏–Ω—É—Ç üèñÔ∏è\n\n` +
    getReminderRow() +
    `–ù–∞–∂–º–∏ /hello —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–∞—Å–∫–æ–π!`
  );
}

function getDefaultSettings() {
  return {
    reminderFrequency: 3, // –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã
    workDuration: 25, // 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã
    breakDuration: 5, // 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤
    longBreakDuration: 15, // 15 –º–∏–Ω—É—Ç –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
    pomodoroCount: 0,
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Pomodoro
function startPomodoro(chatId) {
  const user = userSettings[chatId] || getDefaultSettings();
  user.pomodoroCount = (user.pomodoroCount || 0) + 1;
  userSettings[chatId] = user;

  const isLongBreak = user.pomodoroCount % 4 === 0;
  const breakDuration = isLongBreak
    ? user.longBreakDuration
    : user.breakDuration;

  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
  bot.sendMessage(
    chatId,
    `üçÖ –ü–æ–µ—Ö–∞–ª–∏! –†–∞–±–æ—Ç–∞–µ–º ${user.workDuration} –º–∏–Ω—É—Ç!` +
      (isLongBreak ? '\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤!' : '')
  );

  // –¢–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–µ—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ 0)
  if (user.reminderFrequency > 0) {
    user.checkTimer = setInterval(() => {
      bot.sendMessage(chatId, getRandomPhrase(reminderPhrases));
    }, user.reminderFrequency * 60 * 1000);
  }

  // –¢–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  user.workTimer = setTimeout(() => {
    if (user.checkTimer) clearInterval(user.checkTimer);

    const breakMessage = isLongBreak
      ? getRandomPhrase(longBreakPhrases)
      : getRandomPhrase(breakPhrases);

    bot.sendMessage(chatId, `${breakMessage}`);

    // –¢–∞–π–º–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞
    user.restTimer = setTimeout(() => {
      bot.sendMessage(chatId, `${getRandomPhrase(workStartPhrases)}`);
      startPomodoro(chatId);
    }, breakDuration * 60 * 1000);
  }, user.workDuration * 60 * 1000);

  userSettings[chatId] = user;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  if (!userSettings[chatId]) {
    userSettings[chatId] = getDefaultSettings();
  }
  // –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
  bot.sendMessage(chatId, getWelcomeMessage(), startKeyboard);
});

bot.onText(/\/settings/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, '–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã (—É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞):', settingsKeyboard);
});

bot.onText(/\/hello/, (msg) => {
  const chatId = msg.chat.id;
  if (!userSettings[chatId]) {
    userSettings[chatId] = getDefaultSettings();
  }
  startPomodoro(chatId);
});

bot.onText(/\/stop/, (msg) => {
  const chatId = msg.chat.id;
  const user = userSettings[chatId];

  if (user) {
    if (user.workTimer) clearTimeout(user.workTimer);
    if (user.checkTimer) clearInterval(user.checkTimer);
    if (user.restTimer) clearTimeout(user.restTimer);

    bot.sendMessage(
      chatId,
      '–û–≥–æ, —è –≥–ª—è–∂—É, —É–∂–µ –≤—Å—ë –≥–æ—Ç–æ–≤–æ! –û—Ç–ª–∏—á–Ω–æ, –∫–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏—à—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–∞—Å–∫–µ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ /hello'
    );
  } else {
    bot.sendMessage(
      chatId,
      '–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞—Å–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ —Å–µ–π—á–∞—Å. –ê –∑—Ä—è! –ù–∞–∂–º–∏ /hello, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ç–∞—Å–∫–æ–π.'
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
  const chatId = query.message.chat.id;
  const user = userSettings[chatId] || getDefaultSettings();
  if (query.data === 'start_pomodoro') {
    if (!userSettings[chatId]) {
      userSettings[chatId] = getDefaultSettings();
    }
    startPomodoro(chatId);
    bot.answerCallbackQuery(query.id);
    return;
  }

  if (query.data === 'open_settings') {
    bot.sendMessage(chatId, '–û–±—Å—É–¥–∏–º —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞:', settingsKeyboard);
    bot.answerCallbackQuery(query.id);
    return;
  }

  switch (query.data) {
    case 'set_reminder_freq':
      bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å', callback_data: 'reminder_0' }],
            [{ text: '–ö–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã', callback_data: 'reminder_3' }],
            [{ text: '–ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç', callback_data: 'reminder_5' }],
            [{ text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...', callback_data: 'custom_reminder' }],
          ],
        },
      });
      break;

    case 'set_work_duration':
      bot.sendMessage(chatId, '–£—Å—Ç–∞–Ω–æ–≤–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã (–º–∏–Ω):', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '25 –º–∏–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)', callback_data: 'work_25' }],
            [{ text: '30 –º–∏–Ω', callback_data: 'work_30' }],
            [{ text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...', callback_data: 'custom_work' }],
          ],
        },
      });
      break;

    case 'set_break_duration':
      bot.sendMessage(
        chatId,
        '–£—Å—Ç–∞–Ω–æ–≤–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–∏–Ω):',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '5 –º–∏–Ω (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)', callback_data: 'break_5' }],
              [{ text: '10 –º–∏–Ω', callback_data: 'break_10' }],
              [{ text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...', callback_data: 'custom_break' }],
            ],
          },
        }
      );
      break;

    case 'set_long_break':
      bot.sendMessage(
        chatId,
        '–£—Å—Ç–∞–Ω–æ–≤–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–º–∏–Ω):',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '15 –º–∏–Ω', callback_data: 'long_15' }],
              [{ text: '30 –º–∏–Ω', callback_data: 'long_30' }],
              [{ text: '–°–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ...', callback_data: 'custom_long' }],
            ],
          },
        }
      );
      break;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    case 'reminder_0':
    case 'reminder_3':
    case 'reminder_5':
      const freq = parseInt(query.data.split('_')[1]);
      user.reminderFrequency = freq;
      bot.sendMessage(
        chatId,
        `–ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${formatTime(freq)}`
      );
      break;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã
    case 'work_25':
    case 'work_30':
      const work = parseInt(query.data.split('_')[1]);
      user.workDuration = work;
      bot.sendMessage(chatId, `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${work} –º–∏–Ω`);
      break;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
    case 'break_5':
    case 'break_10':
      const brk = parseInt(query.data.split('_')[1]);
      user.breakDuration = brk;
      bot.sendMessage(
        chatId,
        `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${brk} –º–∏–Ω`
      );
      break;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
    case 'long_15':
    case 'long_30':
      const long = parseInt(query.data.split('_')[1]);
      user.longBreakDuration = long;
      bot.sendMessage(
        chatId,
        `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${long} –º–∏–Ω`
      );
      break;

    // –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    case 'custom_reminder':
      bot.sendMessage(
        chatId,
        '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 25):'
      );
      user.waitingFor = 'reminder';
      break;

    case 'custom_work':
      bot.sendMessage(
        chatId,
        '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 60):'
      );
      user.waitingFor = 'work';
      break;

    case 'custom_break':
      bot.sendMessage(
        chatId,
        '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 30):'
      );
      user.waitingFor = 'break';
      break;

    case 'custom_long':
      bot.sendMessage(
        chatId,
        '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 60):'
      );
      user.waitingFor = 'long';
      break;
  }

  userSettings[chatId] = user;
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const user = userSettings[chatId];
  const text = msg.text;

  if (user && user.waitingFor && /^\d+$/.test(text)) {
    const value = parseInt(text);
    let isValid = false;

    switch (user.waitingFor) {
      case 'reminder':
        if (value >= 1 && value <= 25) {
          user.reminderFrequency = value;
          isValid = true;
        }
        break;

      case 'work':
        if (value >= 1 && value <= 60) {
          user.workDuration = value;
          isValid = true;
        }
        break;

      case 'break':
        if (value >= 1 && value <= 30) {
          user.breakDuration = value;
          isValid = true;
        }
        break;

      case 'long':
        if (value >= 1 && value <= 60) {
          user.longBreakDuration = value;
          isValid = true;
        }
        break;
    }

    if (isValid) {
      bot.sendMessage(chatId, `–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${value} –º–∏–Ω`);
    } else {
      bot.sendMessage(chatId, '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }

    delete user.waitingFor;
    userSettings[chatId] = user;
  }
});

console.log('–ë–æ—Ç –ù–µ–ª–ª–∏ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...');
